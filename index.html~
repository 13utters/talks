<!doctype html>
<html lang="en">

  <head>
    <meta charset="utf-8">

    <title>Big Web App? Compile It!</title>

    <meta name="description" content="Big Web App? Compile It!">
    <meta name="author" content="Alon Zakai">

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <link rel="stylesheet" href="css/reveal.min.css">
    <link rel="stylesheet" href="css/theme/default.css" id="theme">

    <!-- For syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <!-- If the query includes 'print-pdf', use the PDF print sheet -->
    <script>
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    </script>

    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
  </head>

  <body>

    <div class="reveal">

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section>
          <h1>Big Web App?<br>Compile It!</h1>
          <h3>Alon Zakai / Mozilla</h3>
        </section>

        <section>
          <h2>Compiling to JS - Nothing New!</h2>
          <ul>
            <li><b>2006</b>: <b>Google Web Toolkit (GWT)</b>, which compiles Java into JavaScript</li>
            <li><b>2007</b>: <b>pyjamas</b>, which compiles Python into JavaScript</li>
          </ul>
        </section>

        <section>
          <h2>Plenty of Languages</h2>
          <ul>
            <li><a href="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">Jeremy Ashkenas's list</a> has over a hundred</li>
            <li class="zfragment">Two main kinds:
              <ul>
                <li class="zfragment"><b>Established</b> languages: C, C++, Java, C#, Python, etc.</li>
                <li class="zfragment"><b>New languages</b> intended for compilation to JavaScript: CoffeeScript, TypeScript, Dart, Roy, etc.</li>
              </ul>
            </li>
          </ul>
XXX I'll focus on the former, and specifically C/C++
        </section>

        <section>
          <h2>Widespread Adoption</h2>
          <ul>
            <li><b>Java (GWT)</b> used in <a href="http://www.blogger.com/">Blogger</a>, many enterprise apps</li>
            <li><b>C# (Script#)</b> used in <a href="http://office.microsoft.com/en-us/web-apps">Microsoft Office Web Apps</a></li>
            <li>Such applications can consist of <a href="http://blogs.msdn.com/b/ie/archive/2011/11/22/evolving-ecmascript.aspx">hundreds of thousands of lines of code</a> or more</li>
          </ul>
        </section>

        <section>
          <h2>Why is this approach successful?</h2>
        </section>

        <section>
          <h2>1. Language Features</h2>
          <ul>
            <li>Static typing</li>
            <li>Existing tools</li>
          </ul>
        </section>

        <section>
          <h2>2. Performance</h2>
          <p>JavaScript engines have gotten fast enough to run large compiled codebases</p>
          <p>Late 2008/early 2009: <b>V8</b>, <b>TraceMonkey</b>, and <b>Nitro</b> were released, and the race for JavaScript speed was on</p>
        </section>

        <section>
          <h2>2. Performance</h2>
          <ul>
            <li>Compiled JavaScript can be <b>faster</b> than "regular" handwritten JavaScript</li>
            <li class="fragment">Wait, compiled JavaScript is a <b>subset</b> of JavaScript! How can it be faster?</li>
            <li class="fragment">That's what I want to talk to you about :)</li>
          </ul>
        </section>

        <section>
          <h2>One Step Back:<br>How Compilation Works</h2>
          <ul>
            <br>
            <p><b style="color: #ff7700">C/C++</b> &nbsp&nbsp <b>=></b> &nbsp&nbsp <b style="color: #7744aa">LLVM</b> &nbsp&nbsp <b>=></b> &nbsp&nbsp <b style="color: #0077ff">Emscripten</b> &nbsp&nbsp <b>=></b> &nbsp&nbsp <b style="color: #77aa44">JavaScript</b></p>
          </ul>
        </section>

        <section>
          <h2>LLVM Optimizations</h2>
          <p><b>LLVM's optimizer</b> uses type information to perform many useful optimizations. Decades of work have gone into developing optimization passes for C/C++ compilers.</p>
          <br>
          <p><small><span style="color: #ccc">...dce</span><span style="color: #999">, inline</span><span style="color: #666">, constmerge</span><span style="color: #333">, constprop</span><span style="color: #000">, dse</span><span style="color: #000">, licm</span><span style="color: #333">, gvn</span><span style="color: #666">, instcombine</span><span style="color: #999">, mem2reg</span><span style="color: #ccc">, scalarrepl..</span></small></p>
        </section>

        <section>
          <h2>LLVM Optimizations</h2>
          <p>These optimization are only available for compiled code!</p><p>Reproducing them manually on a huge "normal" JavaScript codebase would be
            <ul>
              <li>extremely <b>hard and time-consuming</b>, and</li>
              <li>make the code <b>less maintainable</b></li>
            </ul>
          </p>
        </section>

        <section>
          <h2>JavaScript Engine Optimizations - 1</h2>
          <ul>
            <li>Modern JavaScript engines can <b>infer types</b> at runtime</li>
            <li>This especially helps on code that is implicitly typed - which is exactly what compiled code is!</li>
          </ul>
          <p>
            <pre><code contenteditable>
  function compiledCalculation() {
    var x = f()|0;  // x is a 32-bit value
    var y = g()|0;  // so is y
    return (x+y)|0; // 32-bit addition, no type or overflow checks
  }
            </code></pre>
          </p>
        </section>

        <section>
          <h2>JavaScript Engine Optimizations - 2</h2>
          <ul>
            <li>Modern JavaScript engines optimize <b>typed arrays</b> very well</li>
            <li>Compiled code can use a singleton typed array as memory</li>
          </ul>
          <p>
            <pre><code contenteditable>
  var MEM = new Uint8Array(1024*1024);

  function compiledMemoryAccess(x) {
    // ...
    MEM[x] = MEM[x+10]; // read from x+10, write to x
    // ...
  }
            </code></pre>
          </p>
        </section>

        <section>
          <h2>Benchmarks (X slower than native/gcc -O2, lower is better XXX copy to other places)</h2>
          <table style="border: 1px solid">
            <tr><td><b>Benchmark</b></td><td><b>Firefox</b></td><td><b>Chrome</b></td></tr>
            <tr> <td>Copy</td>        <td> 1.75</td> <td>2.00</td> </tr>
            <tr> <td>Corrections</td> <td> 1.75</td> <td>1.68</td> </tr>
            <tr> <td>Fannkuch</td>    <td> 3.45</td> <td>20.54</td> </tr>
            <tr> <td>Fasta</td>       <td> 3.21</td> <td>10.47</td> </tr>
            <tr> <td>Life</td>        <td> 1.93</td> <td>11.48<a href="http://code.google.com/p/v8/issues/detail?id=2513">(bug)</a></td> </tr>
            <tr> <td>Memops</td>      <td> 2.83</td> <td>2.90</td> </tr>
            <tr> <td>Primes</td>      <td> 1.50</td> <td>2.44</td> </tr>
            <tr> <td>Skinning</td>    <td>13.08</td> <td>61.20<a href="http://code.google.com/p/v8/issues/detail?id=2223">(bug)</a></td> </tr>
            <tr> <td>Zlib</td>        <td> 5.17</td> <td>5.77</td> </tr>
            <tr> <td>Bullet</td>      <td>12.69</td> <td>9.76</td> </tr>
          </table>
        </section>

        <section>
          <h2>4x slower than native.<br>Can we do better?</h2>
          <h2 class="fragment" style="color: #f73">Yes!</h2>
        </section>

        <section>
          <h2>asm.js</h2>
          <p>A <a href="https://github.com/dherman/asm.js">research project</a> at Mozilla that aims to formally
             define the subset of JavaScript that compilers like Emscripten and Mandreel
             <b>already</b> generate: implicitly-typed computations, singleton typed array, etc.
          </p>
        </section>

        <section>
          <h2>asm.js - Formal type system benefits</h2>
          <ul>
            <li>Can validate that a compiler generates JavaScript that fits the spec</li>
            <li>JavaScript engines can analyze code using the spec and optimize more easily</li>
          </ul>
        </section>

        <section>
          <h2>asm.js - Easier Optimization</h2>
          <ul>
            <li>Types of variables pop out of the type system execution XXXX</li>
            <li>Guarantee that there are no speed bumps: No exceptions can be thrown, no variable has more than one type, etc.</li>
          </ul>
        </section>

        <section>
          <h2>Benchmarks</h2>
          <table style="border: 1px solid">
            <tr><td><b>Benchmark</b></td><td><b>Firefox+asm.js</b></td><td><b>Firefox</b></td><td><b>Chrome</b></td></tr>
            <tr> <td>Copy</td>        <td><b style="color: #f93">1.65</b></td> <td> 1.75</td> <td>2.00</td> </tr>
            <tr> <td>Corrections</td> <td><b style="color: #f93">1.27</b></td> <td> 1.75</td> <td>1.68</td> </tr>
            <tr> <td>Fannkuch</td>    <td><b style="color: #f93">1.56</b></td> <td> 3.45</td> <td>20.54</td> </tr>
            <tr> <td>Fasta</td>       <td><b style="color: #f93">3.46</b></td> <td> 3.21</td> <td>10.47</td> </tr>
            <tr> <td>Life</td>        <td><b style="color: #f93">1.63</b></td> <td> 1.93</td> <td>11.48<a href="http://code.google.com/p/v8/issues/detail?id=2513">(bug)</a></td> </tr><td></td> 
            <tr> <td>Memops</td>      <td><b style="color: #f93">1.51</b></td> <td> 2.83</td> <td>2.90</td> </tr>
            <tr> <td>Primes</td>      <td><b style="color: #f93">1.50</b></td> <td> 1.50</td> <td>2.44</td> </tr>
            <tr> <td>Skinning</td>    <td><b style="color: #f93">3.01</b></td> <td>13.08</td> <td>61.20<a href="http://code.google.com/p/v8/issues/detail?id=2223">(bug)</a></td> </tr>
            <tr> <td>Zlib</td>        <td><b style="color: #f93">2.00</b></td> <td> 5.17</td> <td>5.77</td> </tr>
            <tr> <td>Bullet</td>      <td><b style="color: #f93">2.20</b></td> <td>12.69</td> <td>9.76</td> </tr>
          </table>
        </section>

        <section>
          <h2>asm.js - benefits</h2>
          <ul>
            <li><b>Faster code execution</b> - around <b>2X</b> slower than native (comparable to Java, C#)
              <ul><li>Optimizations can be done in a straightforward way in existing JavaScript engines,
                      working prototype in Firefox already</li></ul>
            </li>
            <li>Code is just a subset of JavaScript
              <ul>
                <li>Code <b>already</b> runs in all browsers</li>
                <li><b>No</b> need for new standards</li>
              </ul>
            </li>
          </ul>          
        </section>

        <section>
          <h2>Let's see asm.js in action!</h2>
            <p>Demos - BananaBread, Qt, bullet, mruby, gnuplot</p>
        </section>

        <section>
          <h2></h2>
          <ul>
            <li></li>
          </ul>
        </section>

        <section>
          <h2></h2>
          <ul>
            <li></li>
          </ul>
        </section>

        <section>
          <h2></h2>
          <ul>
            <li></li>
          </ul>
        </section>

        <section>
          <h2></h2>
          <ul>
            <li></li>
          </ul>
        </section>

        <section>
          <h2></h2>
          <ul>
            <li></li>
          </ul>
        </section>

        <section>
          <h2></h2>
          <ul>
          </ul>
        </section>

        <section>
          <h2></h2>
        </section>

        <section>
          <h2></h2>
        </section>

        <section>
          <h2></h2>
        </section>

        <section>
          <h2>Heads Up</h2>
          <p>
            reveal.js is a framework for easily creating beautiful presentations using HTML. You'll need a browser with
            support for CSS 3D transforms to see it in its full glory.
          </p>

          <aside class="notes">
            Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
          </aside>
        </section>

        <!-- Example of nested vertical slides -->
        <section>
          <section>
            <h2>Vertical Slides</h2>
            <p>
              Slides can be nested inside of other slides,
              try pressing <a href="#" class="navigate-down">down</a>.
            </p>
            <a href="#" class="image navigate-down">
              <img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow">
            </a>
          </section>
          <section>
            <h2>Basement Level 1</h2>
            <p>Press down or up to navigate.</p>
          </section>
          <section>
            <h2>Basement Level 2</h2>
            <p>Cornify</p>
            <a class="test" href="http://cornify.com">
              <img width="280" height="326" src="https://s3.amazonaws.com/hakim-static/reveal-js/cornify.gif" alt="Unicorn">
            </a>
          </section>
          <section>
            <h2>Basement Level 3</h2>
            <p>That's it, time to go back up.</p>
            <a href="#/2" class="image">
              <img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Up arrow" style="-webkit-transform: rotate(180deg);">
            </a>
          </section>
        </section>

        <section>
          <h2>Point of View</h2>
          <p>
            Press <strong>ESC</strong> to enter the slide overview. Hold down alt and click on any element to zoom in on it using <a href="http://lab.hakim.se/zoom-js">zoom.js</a>. Alt + click anywhere to zoom back out.
          </p>
        </section>

        <section>
          <h2>rvl.io</h2>
          <p>
            If you don't like writing slides in HTML you can use the online editor <a href="http://www.rvl.io" target="_blank">rvl.io</a>.
          </p>
        </section>

        <section>
          <h2>Works in Mobile Safari</h2>
          <p>
            Try it out! You can swipe through the slides and pinch your way to the overview.
          </p>
        </section>

        <section>
          <h2>Marvelous Unordered List</h2>
          <ul>
            <li>No order here</li>
            <li>Or here</li>
            <li>Or here</li>
            <li>Or here</li>
          </ul>
        </section>

        <section>
          <h2>Fantastic Ordered List</h2>
          <ol>
            <li>One is smaller than...</li>
            <li>Two is smaller than...</li>
            <li>Three!</li>
          </ol>
        </section>

        <section data-markdown>
          <script type="text/template">
            ## Markdown support

            For those of you who like that sort of thing. Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).

              <section data-markdown>
                ## Markdown support

                For those of you who like that sort of thing.
                Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).
              </section>
          </script>
        </section>

        <section id="transitions">
          <h2>Transition Styles</h2>
          <p>
            You can select from different transitions, like: <br>
            <a href="?transition=cube#/transitions">Cube</a> -
            <a href="?transition=page#/transitions">Page</a> -
            <a href="?transition=concave#/transitions">Concave</a> -
            <a href="?transition=zoom#/transitions">Zoom</a> -
            <a href="?transition=linear#/transitions">Linear</a> -
            <a href="?transition=fade#/transitions">Fade</a> -
            <a href="?transition=none#/transitions">None</a> -
            <a href="?#/transitions">Default</a>
          </p>
        </section>

        <section id="themes">
          <h2>Themes</h2>
          <p>
            Reveal.js comes with a few themes built in: <br>
            <a href="?theme=sky#/themes">Sky</a> -
            <a href="?theme=beige#/themes">Beige</a> -
            <a href="?theme=simple#/themes">Simple</a> -
            <a href="?theme=serif#/themes">Serif</a> -
            <a href="?theme=night#/themes">Night</a> -
            <a href="?#/themes">Default</a>
          </p>
          <p>
            <small>
              * Theme demos are loaded after the presentation which leads to flicker. In production you should load your theme in the <code>&lt;head&gt;</code> using a <code>&lt;link&gt;</code>.
            </small>
          </p>
        </section>

        <section>
          <section data-state="alert">
            <h2>Global State</h2>
            <p>
              Set <code>data-state="something"</code> on a slide and <code>"something"</code>
              will be added as a class to the document element when the slide is open. This lets you
              apply broader style changes, like switching the background.
            </p>
            <a href="#" class="image navigate-down">
              <img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow">
            </a>
          </section>
          <section data-state="blackout">
            <h2>"blackout"</h2>
            <a href="#" class="image navigate-down">
              <img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow">
            </a>
          </section>
          <section data-state="soothe">
            <h2>"soothe"</h2>
            <a href="#" class="image navigate-next">
              <img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Up arrow" style="-webkit-transform: rotate(-90deg);">
            </a>
          </section>
        </section>

        <section data-state="customevent">
          <h2>Custom Events</h2>
          <p>
            Additionally custom events can be triggered on a per slide basis by binding to the <code>data-state</code> name.
          </p>
          <pre><code contenteditable style="font-size: 18px; margin-top: 20px;">Reveal.addEventListener( 'customevent', function() {
  console.log( '"customevent" has fired' );
} );
          </code></pre>
        </section>

        <section>
          <h2>Clever Quotes</h2>
          <p>
            These guys come in two forms, inline: <q cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations">
            The nice thing about standards is that there are so many to choose from</q> and block:
          </p>
          <blockquote cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations">
            For years there has been a theory that millions of monkeys typing at random on millions of typewriters would
            reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.
          </blockquote>
        </section>

        <section>
          <h2>Pretty Code</h2>
          <pre><code contenteditable>
function linkify( selector ) {
  if( supports3DTransforms ) {

    var nodes = document.querySelectorAll( selector );

    for( var i = 0, len = nodes.length; i &lt; len; i++ ) {
      var node = nodes[i];

      if( !node.className ) ) {
        node.className += ' roll';
      }
    };
  }
}
          </code></pre>
          <p>Courtesy of <a href="http://softwaremaniacs.org/soft/highlight/en/description/">highlight.js</a>.</p>
        </section>

        <section>
          <h2>Intergalactic Interconnections</h2>
          <p>
            You can link between slides internally,
            <a href="#/2/3">like this</a>.
          </p>
        </section>

        <section>
          <section>
            <h2>Fragmented Views</h2>
            <p>Hit the next arrow...</p>
            <p class="fragment">... to step through ...</p>
            <ol>
              <li class="fragment"><code>any type</code></li>
              <li class="fragment"><em>of view</em></li>
              <li class="fragment"><strong>fragments</strong></li>
            </ol>

            <aside class="notes">
              This slide has fragments which are also stepped through in the notes window.
            </aside>
          </section>
          <section>
            <h2>Fragment Styles</h2>
            <p>There's a few styles of fragments, like:</p>
            <p class="fragment grow">grow</p>
            <p class="fragment shrink">shrink</p>
            <p class="fragment roll-in">roll-in</p>
            <p class="fragment fade-out">fade-out</p>
            <p class="fragment highlight-red">highlight-red</p>
            <p class="fragment highlight-green">highlight-green</p>
            <p class="fragment highlight-blue">highlight-blue</p>
          </section>
        </section>

        <section>
          <h2>Spectacular image!</h2>
          <a class="image" href="http://lab.hakim.se/meny/" target="_blank">
            <img width="320" height="299" src="http://s3.amazonaws.com/hakim-static/portfolio/images/meny.png" alt="Meny">
          </a>
        </section>

        <section>
          <h2>Export to PDF</h2>
          <p>Presentations can be <a href="https://github.com/hakimel/reveal.js#pdf-export">exported to PDF</a>, below is an example that's been uploaded to SlideShare.</p>
          <iframe id="slideshare" src="http://www.slideshare.net/slideshow/embed_code/13872948" width="455" height="356" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>
          <script>
            document.getElementById('slideshare').attributeName = 'allowfullscreen';
          </script>
        </section>

        <section>
          <h2>Take a Moment</h2>
          <p>
            Press b or period on your keyboard to enter the 'paused' mode. This mode is helpful when you want to take distracting slides off the screen
            during a presentation.
          </p>
        </section>

        <section>
          <h2>Stellar Links</h2>
          <ul>
            <li><a href="https://github.com/hakimel/reveal.js">Source code on GitHub</a></li>
            <li><a href="http://hakim.se/projects/reveal-js">Leave feedback on my site</a></li>
            <li><a href="http://twitter.com/hakimel">Follow me on Twitter</a></li>
          </ul>
        </section>

        <section>
          <h2>It's free</h2>
          <p>
            reveal.js and <a href="http://www.rvl.io">rvl.io</a> are entirely free but if you'd like to support the projects you can donate below.
            Donations will go towards hosting and domain costs.
          </p>
          <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
            <input type="hidden" name="cmd" value="_donations">
            <input type="hidden" name="business" value="hakim.elhattab@gmail.com">
            <input type="hidden" name="lc" value="US">
            <input type="hidden" name="item_name" value="reveal.js / rvl.io">
            <input type="hidden" name="no_note" value="0">
            <input type="hidden" name="currency_code" value="USD">
            <input type="hidden" name="bn" value="PP-DonationsBF:btn_donate_LG.gif:NonHostedGuest">
            <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
          </form>
        </section>

        <section>
          <h1>THE END</h1>
          <h3>BY Hakim El Hattab / hakim.se</h3>
        </section>

      </div>

    </div>

    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.min.js"></script>

    <script>

      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        theme: 'beige', //Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/fade/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });

    </script>

  </body>
</html>
